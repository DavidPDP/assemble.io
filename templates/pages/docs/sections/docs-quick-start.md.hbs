This plugin requires Grunt `{{ package.devDependencies.grunt }}`

If you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:

```shell
npm install assemble --save-dev
```

Once the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:

```js
grunt.loadNpmTasks('assemble');
```

When completed, you'll be able to run the various `grunt` commands provided:

#### build - `grunt assemble`
Runs the `{{package.name}}` task to rebuild the project. {{ meta.build_requires }}

#### test - `grunt test`
Runs jshint on JavaScripts and mocha unit tests on {{ meta.file_types }}.

#### watch - `grunt watch`
Requires [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch), `npm i grunt-contrib-watch`. This is a convenience task for watching files and automatically re-building them whenever you save. Requires the [grunt-contrib-watch](http://github.com/gruntjs/grunt-contrib-watch) Grunt plugin.

Should you encounter problems with installing dependencies or running the `grunt` commands, be sure to first uninstall any previous versions (global and local) you may have installed, and then rerun `npm install`.


***

## HELPERS

For linting and testing this project uses Grunt `{{ docs.devDependencies.grunt }}`, but Grunt is **not required** to use the helpers. Check out the [Getting Started](http://gruntjs.com/getting-started) guide to learn more about Grunt.

```shell
npm install helper-lib --save
```
Once helper-lib has been installed, it may be used within your application with the following JavaScript:

```js
var handlebars = require('Handlebars');
var helpers = require('helper-lib');
helpers.register(Handlebars);
```

Now your handlebars instance will have access to the helpers.

### Features unique to helper-lib

Some helpers offer useful functionality that is unique to this project, such as:

* File globbing using [minimatch](https://github.com/isaacs/minimatch) patterns
* Access to [assemble](https://github.com/assemble/assemble) options.
* Ability to render either markdown or HTML conditionally based on the file extension of the generated file.

Lots more...