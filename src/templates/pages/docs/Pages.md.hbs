---
title: Pages
section: templates
---
{{#draft}}
globbing


The `pages` variable will generate the list of pages process in a target. Technically, `pages` behaves like a collection, but since _it cannot be referred to in the YAML front matter of a page_ it is not referred to as such.
{{/draft}}

### Usage example

Assuming our project is structured like this:

```
src/
  layouts/default.hbs
  docs/
    index.hbs
    api.hbs
    cheatsheet.hbs
  posts/
    index.hbs
    articles.hbs
    projects.hbs
    about.hbs
    contact.hbs
```

And the `assemble` task in our Gruntfile has the following targets:

```javascript
assemble: {
  options: {
    layout: 'layouts/default.hbs'
  },
  docs: {
    files: {
      'docs/': ['src/docs/pages/*.hbs'],
    }
  },
  blog: {
    files: {
      'blog/': ['src/blog/posts/*.hbs'],
    }
  }
}
```

And that `default.hbs` has the following contents:

```handlebars
<ul>
  \{{#each pages}}
    <li><a href="#">\{{../pagename}}</a></li>
  \{{/each}}
</ul>
```

Then in `docs/index.html` the rendered content will be:

```html
<ul>
  <li><a href="#">index</a></li>
  <li><a href="#">api</a></li>
  <li><a href="#">cheatsheet</a></li>
</ul>
```

And in `blog/index.html` the rendered content will be:

```html
<ul>
  <li><a href="#">index</a></li>
  <li><a href="#">articles</a></li>
  <li><a href="#">projects</a></li>
  <li><a href="#">about</a></li>
  <li><a href="#">contact</a></li>
</ul>
```


#### Using YFM with the `page` variable

With a couple of simple modifications to the previous example, we can have the output reflect the `title` of each page, rather than the file name.

First, we add a `title:` to the YAML front matter of each page, like this:

```yaml
---
title: home
---
```

Then we change our template to use the `title` variable instead of the file name:

```html
<ul>
  \{{#each pages}}
    <li><a href="#">\{{../page.title}}</a></li>
  \{{/each}}
</ul>
```
which renders to:

```html
<ul>
  <li><a href="#">home</a></li><!-- text is now "home" instead of "index" -->
  <li><a href="#">articles</a></li>
  <li><a href="#">projects</a></li>
  <li><a href="#">about</a></li>
  <li><a href="#">contact</a></li>
</ul>
```

#### "Titleizing" the output
We can even go a step further and make the rendered titles propercase:

```html
<ul>
  \{{#each pages}}
    <li><a href="#">\{{titleize ../page.title}}</a></li>
  \{{/each}}
</ul>
```
which renders to:

```html
<ul>
  <li><a href="#">Home</a></li>
  <li><a href="#">Articles</a></li>
  <li><a href="#">Projects</a></li>
  <li><a href="#">About</a></li>
  <li><a href="#">Contact</a></li>
</ul>
```

### Excluding pages

**From the YAML Front Matter of a page**

You may also exclude files from being rendered by adding `published: false` to the YAML Front Matter of a page.

```yaml
---
title: Just testing some stuff on this page, it should not be published
published: false
---
```

**From the Gruntfile**

Exclude files from being rendered by prefixing source file patterns with `!`. Visit the Grunt.js doce to [learn more about globbing](http://gruntjs.com/configuring-tasks#globbing-patterns) patterns.

##### [Quoted from the Grunt.js docs](http://gruntjs.com/configuring-tasks#globbing-patterns) â†’

```javascript
// All files except for bar.js, in alpha order:
{src: ['foo/*.js', '!foo/bar.js'], dest: ...}

// All files in alpha order, but with bar.js at the end.
{src: ['foo/*.js', '!foo/bar.js', 'foo/bar.js'], dest: ...}
```


{{#draft}}

NOTE: If you're reading this unpublished content, know that these features haven't even been released. So it's probably best to _not_ try to use them ;-) Sorry.

# Pages

## Defining a Page

Each page consist of the following objects:

 * [Metadata](): aside from `<title>Page Title</title>`, in this project `metadata` means more than "meta tags", it also refers to information that might be recorded somewhere on a web page such as _time and date_, _creator_ or _author_ and so on.
 * [Content](): among other things, _content_ is the text, images, sounds, videos or animations that a page might contain, including even the [microcopy]() used inside buttons, tags and labels, or other similar elements.
 * [Layout]():

When a page is defined, all objects are optional except for the page `<title></title>`. In addition, when certain objects are excluded, any available defaults will be used in their place.

The simplest way to define a new page is to add a `page.json` file in the following directory `./src/templates/pages/custom/`, and add a single property to declare the

```json
{
  "home": {}
}
```

Sensible defaults are provide for common global properties, so that if you need to quickly scaffold a project you can do so without having to fill out an entire config file.

```json
{
  "home": {
    "title": "Home"
  }
}
```

then the page would compile with the file name `home.html`. So if we want the page's file name to be `index.html`, we woud add that to the `home` object:

```json
{
  "home": {
    "title": "Home",
    "filename": "index",
    "content": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
  }
}
```

YAML front matter is also processed:

```html
---
title: Snow crabs are swarthy and devious criminals.
subtitle: A true and captivating tale of how a band of ingenious snow crabs successfully robbed the Bank of New York.
author: Jon Schlinkert
category: Breaking news
layout: featured-article
---
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
```
```json
{
  "home": {
    "title": "Home",
    "filename": "index",
    "layout": "path/to/layout.json",
    "masthead": "A beautiful, responsive theme. By <%= theme.author %>",
    "content": [
      "path/to/content1.md",
      "path/to/content1.md",
      "path/to/content2.md"
    ],
    "variables": {
      "hero": "This is an awesome theme!",
      "buy-now": "Buy Now!"
    }
  }
}
```
Or the same in YAML:

```yaml
home:
  title: "Home"
  filename: index
  layout: path/to/layout.json
  masthead: A beautiful, responsive theme. By <%= theme.author %>
  content:
  - path/to/content1.md
  - path/to/content1.md
  - path/to/content2.md
  variables:
    hero: This is an awesome theme!
    buy-now: Buy Now!
```

## Collections of pages

A collections of pages is defined like this:

```json
{
  "about": {
    // properties
  },
  "contact": {
    // properties
  },
  "blog": {
    // properties
  },
  "post": {
    // properties
  }
}
```

json

```json
{
  "pages": "path/to/pages.json",
}
```

YAML

```yaml
pages: path/to/pages.json
```
1. Create a `pages.json` file and add an object for each page to be built:


Add the `pages` object "short-format" to your configuration file, and create sub-objects for each page to be built.

```json
{
  "pages": {
    "home": "path/to/custom/home.json",
    "about": "path/to/custom/about.json",
    "blog": "path/to/custom/blog.json",
    "contact": false
  }
}
```

To exclude a page simple provide a falsy value. The same goes for excluding `layouts` or other default values.


Add the `pages` object "long-format" to your configuration file, and create sub-objects for each page to be built.

```json
{
  "pages": {
    "home": {
      "title": "Home",
      "masthead": "A beautiful, responsive theme. By <%= theme.author %>",
      "slug": "index",
      "layout-example1": "<%= defaults.layouts.home %>",
      "layout-example2": "path/to/home-page-layouts/carousel.hbs",
      "content-example": "path/to/home.md", // content can be a single path, array or globbing patterns
      "content": [
        "content1.md",
        "content1.md",
        "content2.md"
      ]
    },
    "about": {
      "title": "About Us",
      "slug": "about",
      "layout": "path/to/layouts-type1/full-width.hbs",
      "content": "path/to/about-us.md"
    },
    "contact": {
      "title": "Contact Us",
      "slug": "contact",
      "layout": "path/to/layouts-type1/full-width.hbs",
      "content": "path/to/contact-us.md"
    },
    "blog": {
      "title": "Blog",
      "subtitle": "Welcome to our Blog!",
      "slug": "blog",
      "layout": "path/to/layouts-type1/two-column.hbs",
      "content": "path/to/contact-us.md"
    },
    "post": {
      "title": "{{ page.title }}",
      "slug": "<%= grunt.template.today(\"yyyy\")-<%= post-name %>",
      "layout": "path/to/layouts-type4/two-column.hbs",
      //"content": "<%= theme.content %>" // the 'content' object in the theme.json file, might reference content.md
      "content": "path/to/post.md"
    },
    "article": { // alternative to 'post'
      "title": "Example Blog Post",
      "subtitle": "The most important blog post you've ever read.",
      "slug": "example-blog-post",
      "layout": "<%= defaults.layouts.blog %>",
      "content": "path/to/post.md"
    },
    "catalog": {
      "title": "Products",
      "slug": "products",
      "layout": "path/to/layouts-type2/gallery.hbs",
      "content": "<%= products %>/products.yml"
    },
    "product": {
      "title": "{{ page.title }}",
      "slug": "products",
      "layout": "path/to/layouts-products/product-example.hbs",
      "content": "<%= products %>/product-types1/product.yml"
    },
    "portfolio": {
      "title": "Our Work",
      "layout": "../../layouts/my-custom-layouts/portfolio.hbs"
    }
  }
}
```

{{/draft}}