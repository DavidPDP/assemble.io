---
title: Templates Overview
section: templates
---

> Using templates with Assemble

* [Pages][pages]
* [Partials][partials]
* [Layouts][layouts]
* [Helpers][helpers]


## Layouts

[layouts][layouts] make it simple to share common code across multiple pages in a project.  



{{#draft}}

* Lo-Dash
* Handlebars


## [Handlebars](http://handlebarsjs.com/)

Handlebars is the default template engine that ships with Assemble.

Handlebars Paths

Handlebars supports simple paths, just like Mustache.

```handlebars
<p>\{{name}}</p>
```

Handlebars also supports nested paths, making it possible to look up properties nested below the current context.


### Example

Layout

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>\{{title}}</title>
  </head>
  <body>
    \{{> body }}
  </body>
</html>
```


### Adding data to sections

To add data to a section, you have to understand how context works. For example, if we have a JSON file named `section.json` :

```json
{
  "header" : {
    "title" : "Page Title",
    "description" : "This is the page description."
  }
}
```

And we want that data to end up in our templates, so our templates must start with the `section` variable:

```handlebars
\{{#section.header}}
<div class="page-header">
  <h1>\{{ title }}</h1>
  <p>\{{ description }}</p>
</div>
\{{/section.header}}
```

Output:

```html
<div class="page-header">
  <h1>Page Title</h1>
  <p>This is the page description.</p>
</div>
```


## Lo-Dash

TODO...



## Arrays

The `\{{#each}}` helper is used for accessing data in arrays. Let's say we start with an array of items:

```json
{
  "items" : [
    {
      "title" : "First Item",
      "description" : "This is the first item description."
    },
    {
      "title" : "Second Item",
      "description" : "This is the second item description."
    },
    {
      "title" : "Third Item",
      "description" : "This is the third item description."
    }
  ]
}
```

Inside our templates, we use the `\{{#each}}` helper like this:

```handlebars
\{{#each items}}
<div>
  <h1>\{{ title }}</h1>
  <p>\{{ description }}</p>
</div>
\{{/each}}
```

And it compiles to:

```html
<div>
  <h1>First Item</h1>
  <p>This is the first item description.</p>
</div>
<div>
  <h1>Second item</h1>
  <p>This is the second item description.</p>
</div>
<div>
  <h1>Third Item</h1>
  <p>This is the third item description.</p>
</div>
```


### Lo-Dash Templates in YAML Front Matter

Although the Handlebars helpers from [helper lib][] can be extremely useful and powerful, they can only be used inside the content of a page. So there are certain situation where they fall short, such as when you want to make a string lowercase _and_ replace spaces in the string with dashes. 

For example:

From this

```
Page Title
```

To this

```
page-title 
```

We could use the `\{{hyphenate}}` Handlebars helper from [helper lib][] in the content of the page:

```handlebars
---
title: Page Title
---
<div class="\{{hyphenate title}}">
  <h1>\{{ title }}</h1>
</div>
```

But this will only replace spaces with hyphens: `Page-Title`, and not lowercase. To get the results we need we can use Lo-Dash templates inside the YAML front matter:

```handlebars
---
title: Page Title
class: <%= title.toLowerCase().split(" ").join("-") %>
---
<div class="\{{class}}">
  <h1>\{{ title }}</h1>
</div>
```
Results in `page-title`. 

#### Lo-Dash and Handlebars together

Or, depending on your tastes, you might find it preferrable to use combination of underscore templates in the YAML front matter with handlebars in the page itself.

```handlebars
---
title: Page Title
class: <%= title.toLowerCase() %>
---
<div class="\{{hyphenate class}}">
  <h1>\{{ title }}</h1>
</div>
```

### Where can Lo-Dash Templates be used with Assemble?

* Inside the Gruntfile 
* In YAML front matter of pages **and partials**
* In JSON or YAML files that supply content or data to pages or partials
* In external JSON or YAML files that are used to supply configuration data to Assemble

For example, inside `alert.json` :

```json
{
  "class": "welcome-alert",
  "message": "Welcome to <%= title %>, the best place on the web."
}
```

Or the same in YAML:

```yaml
class: welcome-alert
message: Welcome to <%= title %>, the best place on the web
```

Here are the global defaults:

1. `YAML front matter` : YAML front matter must be the first thing in the file and takes the form of:YAML front-matter allows wins over all other methods, if 
not defined the following option is used.
2. page.json:
3. config.json with a `page` or `pages` object

```yaml
---
scaffold:
  theme:
  title: Home
  layout: full-width
  published: false
  tags:
---
```

## Page

Same as global defaults:
 1. `YAML Front Matter` on each page is the _most_ specific, and will always "win" over other methods
 2. `page.json`
 3. `something.json` which references a `page` or `pages` objects or properties

One way to take advantage of specificity is to **use underscore templates inside your YAML Front Matter**. For example:

```yaml
---
project: <%= projects %>/<%= project.type %>/<%= project.name %>.json
---
```
or:

```yaml
---
project:
  name: Project Name
  theme: <%= themes %>/<%= theme.type %>/<%= theme.name %>.json
  scaffold: <%= scaffolds %>/<%= scaffold.type %>/<%= scaffold.name %>.json
    page: <%= pages %>/<%= page.type %>/<%= page.name %>.json
      title: Page Name
      layout: <%= layouts %>/<%= layout.type %>/<%= layout.name %>.json
        section:
          - <%= sections %>/<%= sections.type %>/<%= sections.name %>.json
          components:
            - <%= component.name %>.json
            - <%= component.name2 %>.json
---
```


## Layout


### Sections

zones...

## Partials

components, widgets, modules...

### Snippets

reusable blocks of code which are not



## Templates


**Template Processors**


## Data

  * "mock" data
  * content
  * microcopy

Data-models,

{{/draft}}